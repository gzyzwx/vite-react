{
  "compilerOptions": {
    "target": "ESNext", // 目标语言的版本
    "module": "ESNext", // 生成代码的模板标准
    "moduleResolution": "Node", // 模块解析策略，ts默认用node的解析策略，即相对的方式导入
    "lib": ["DOM", "DOM.Iterable", "ESNext"], // 编译时引入的 ES 功能库，包括：es5 、es6、es7、dom 等。// 如果未设置，则默认为： target 为 es5 时: ["dom", "es5", "scripthost"]
    "types": ["vite/client", "node"], // 加载的声明文件包，如果指定了某个值， 她会在 typeRoots 下找这个包，找到了就只加载这个包
    "allowJs": true, // 允许编译器编译JS，JSX文件
    "skipLibCheck": false,
    "esModuleInterop": false, // 允许export=导出，由import from 导入
    "allowSyntheticDefaultImports": true,
    "strict": true, // 开启所有严格的类型检查
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true, // 不输出文件,即编译后不会生成任何js文件
    "jsx": "react", //在 .tsx 中支持 JSX ：React 或 Preserve
    "baseUrl": ".", // 解析非相对模块的基地址，默认是当前目录
    "paths": {
      // 路径映射，相对于baseUrl，如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置："jquery": ["node_modules/jquery/dist/jquery.min.js"]
      "@/*": ["src/*"],
      "@c/*": ["config/*"]
    }
  },
  // 指定一个文件glob匹配模式列表
  "include": [
    "src/",
    "typings/**/*",
    "config/**/*",
    "vite.config.ts",
    "mock/_createProductionServer.ts"
  ],
  "exclude": ["node_modules", "build", "dist", "**/*.js"]
}
